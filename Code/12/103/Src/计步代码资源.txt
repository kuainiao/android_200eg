  Sensor sensor = event.sensor;
        //获取默认与重新设置的目标步数
        tarGet = (int) progressCircle.getTarGet();
        synchronized (this) {
            // 判断传感器的类型是否为重力传感器(加速度传感器)
            int j = (sensor.getType() == Sensor.TYPE_ACCELEROMETER) ? 1 : 0;
            if (j == 1) {
                float vSum = 0;
                // 获取x轴、y轴、z轴的加速度
                for (int i = 0; i < 3; i++) {
                    final float v = mYOffset + event.values[i] * mScale[j];
                    vSum += v;
                }
                int k = 0;
                float v = vSum / 3;//获取三轴加速度的平均值
                // 判断人是否处于行走中，主要从以下几个方面判断：
                // 人如果走起来了，一般会连续多走几步。因此，如果没有连续4-5个波动，那么就极大可能是干扰。
                // 人走动的波动，比坐车产生的波动要大，因此可以看波峰波谷的高度，只检测高于某个高度的波峰波谷。
                // 人的反射神经决定了人快速动的极限，怎么都不可能两步之间小于0.2秒，因此间隔小于0.2秒的波峰波谷直接跳过通过重力加速计感应，
                // 重力变化的方向，大小。与正常走路或跑步时的重力变化比对，达到一定相似度时认为是在走路或跑步。实现起来很简单，只要手机有重力感应器就能实现。
                // 软件记步数的精准度跟用户的补偿以及体重有关，也跟用户设置的传感器的灵敏度有关系，在设置页面可以对相应的参数进行调节。一旦调节结束，可以重新开始。
                float direction = (v > mLastValues[k] ? 1 : (v < mLastValues[k] ? -1 : 0));
                if (direction == -mLastDirections[k]) {
                    int extType = (direction > 0 ? 0 : 1);
                    mLastExtremes[extType][k] = mLastValues[k];
                    float diff = Math.abs(mLastExtremes[extType][k] - mLastExtremes[1 - extType][k]);

                    if (diff > SENSITIVITY) {
                        boolean isAlmostAsLargeAsPrevious = diff > (mLastDiff[k] * 2 / 3);
                        boolean isPreviousLargeEnough = mLastDiff[k] > (diff / 3);
                        boolean isNotContra = (mLastMatch != 1 - extType);
                        if (isAlmostAsLargeAsPrevious && isPreviousLargeEnough && isNotContra) {
                            mEnd = System.currentTimeMillis();
                            // 通过判断两次运动间隔判断是否走了一步
                            if (mEnd - mStart > 500) {
                                CURRENT_SETP++;             //加一步
                                mLastMatch = extType;
                                mStart = mEnd;              //结束时间为开始时间
                                if (CURRENT_SETP <= tarGet) {
                                    progressCircle.setProgress(CURRENT_SETP);   //设置步数的进度与进度条结合
                                    progressCircle.postInvalidate();            //刷新
                                }
                                //存储当前的步数
                                SaveKeyValues.putIntValues("sport_steps", CURRENT_SETP);
                                stepNumber.setText(CURRENT_SETP + "");          //显示当前步数
                            }
                        } else {
                            mLastMatch = -1;
                        }
                    }
                    mLastDiff[k] = diff;
                }
                mLastDirections[k] = direction;
                mLastValues[k] = v;
            }
        }
