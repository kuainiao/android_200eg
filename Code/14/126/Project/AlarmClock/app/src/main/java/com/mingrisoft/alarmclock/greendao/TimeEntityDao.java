package com.mingrisoft.alarmclock.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mingrisoft.alarmclock.greendao.TimeEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TIME_ENTITY".
*/
public class TimeEntityDao extends AbstractDao<TimeEntity, Long> {

    public static final String TABLENAME = "TIME_ENTITY";

    /**
     * Properties of entity TimeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ID = new Property(1, Long.class, "ID", false, "ID");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
        public final static Property Hour = new Property(4, Integer.class, "hour", false, "HOUR");
        public final static Property Min = new Property(5, Integer.class, "min", false, "MIN");
        public final static Property Tf = new Property(6, Boolean.class, "tf", false, "TF");
    };


    public TimeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TimeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TIME_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID\" INTEGER," + // 1: ID
                "\"TIME\" TEXT," + // 2: time
                "\"DATE\" TEXT," + // 3: date
                "\"HOUR\" INTEGER," + // 4: hour
                "\"MIN\" INTEGER," + // 5: min
                "\"TF\" INTEGER);"); // 6: tf
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TIME_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TimeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(2, ID);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        Integer hour = entity.getHour();
        if (hour != null) {
            stmt.bindLong(5, hour);
        }
 
        Integer min = entity.getMin();
        if (min != null) {
            stmt.bindLong(6, min);
        }
 
        Boolean tf = entity.getTf();
        if (tf != null) {
            stmt.bindLong(7, tf ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TimeEntity readEntity(Cursor cursor, int offset) {
        TimeEntity entity = new TimeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // date
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // hour
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // min
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // tf
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TimeEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHour(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMin(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTf(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TimeEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TimeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
